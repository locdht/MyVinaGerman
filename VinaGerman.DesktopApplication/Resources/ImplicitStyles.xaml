<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:helper="clr-namespace:VinaGerman.DesktopApplication.Utilities"              
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <!--Common controls-->
    <SolidColorBrush x:Key="BorderBrush" Color="{DynamicResource AccentColor}" ></SolidColorBrush>
    <SolidColorBrush x:Key="ForegroundBrush" Color="{DynamicResource AccentColor}" ></SolidColorBrush>

    <Style x:Key="DialogButton" TargetType="Button">
        <Setter Property="FontSize" Value="16" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="bg" Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource BackColor}" TargetName="bg" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="Gray" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="TopImageButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}" >
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Margin" Value="10" />
        <Setter Property="Height" Value="50" />
        <Setter Property="Width" Value="50" />
        <Setter Property="Background" Value="Transparent"/>
    </Style>

    <Style x:Key="TopText" TargetType="{x:Type TextBlock}" >
        <Setter Property="Margin" Value="10" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="FontSize" Value="25" />
    </Style>

    <Style x:Key="TopImage" TargetType="{x:Type Image}" >
        <Setter Property="Margin" Value="10" />
        <Setter Property="Height" Value="50" />
        <Setter Property="Width" Value="50" />
    </Style>

    <Style x:Key="BottomImageBar" TargetType="{x:Type StackPanel}" >
        <Setter Property="Orientation" Value="Horizontal" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Background" Value="Transparent"/>
    </Style>

    <Style x:Key="BottomImageButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}" >
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Margin" Value="10,10,10,10" />
        <Setter Property="Height" Value="50" />
        <Setter Property="Width" Value="50" />
        <Setter Property="Background" Value="Transparent"/>
        <Style.Triggers>
            <Trigger Property="Control.IsEnabled" Value="false">
                <Setter Property="Control.Opacity" Value="0.5" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="SmallBottomImageButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}" >
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Margin" Value="5,5,5,5" />
        <Setter Property="Height" Value="40" />
        <Setter Property="Width" Value="40" />
        <Setter Property="Background" Value="Transparent"/>
        <Style.Triggers>
            <Trigger Property="Control.IsEnabled" Value="false">
                <Setter Property="Control.Opacity" Value="0.5" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ContentGrid" TargetType="{x:Type UserControl}" >
        <Setter Property="Background" Value="White" />
        <Setter Property="Padding" Value="20" />
    </Style>

    <Style x:Key="BorderGrid" TargetType="{x:Type Border}" >
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="8" />
    </Style>

    <Style x:Key="LabelBarCaption" TargetType="{x:Type Label}" >
        <Setter Property="FontFamily" Value="Microsoft Sans Serif"/>
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="Padding" Value="0" />
    </Style>

    <Style x:Key="BaseLabel" TargetType="{x:Type Label}">
        <Setter Property="FontFamily" Value="Microsoft Sans Serif"/>
        <Setter Property="FontSize" Value="14" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
        <Style.Triggers>
            <Trigger Property="Control.IsEnabled" Value="false">
                <Setter Property="Control.Foreground" Value="Gray" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="BaseHeaderLabel" TargetType="{x:Type Label}">
        <Setter Property="FontFamily" Value="Microsoft Sans Serif"/>
        <Setter Property="FontSize" Value="16" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Foreground" Value="White" />
    </Style>

    <Style x:Key="BaseHeaderTextBlock" TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="Microsoft Sans Serif"/>
        <Setter Property="FontSize" Value="13" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Background" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Foreground" Value="White" />
    </Style>

    <Style x:Key="TooltipLabel" TargetType="{x:Type Label}">
        <Setter Property="FontFamily" Value="Microsoft Sans Serif"/>
        <Setter Property="FontSize" Value="13" />
        <Setter Property="FontStyle" Value="Italic" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
    </Style>

    <Style x:Key="TooltipTextBlock" TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="Microsoft Sans Serif"/>
        <Setter Property="FontSize" Value="13" />
        <Setter Property="FontStyle" Value="Italic" />
        <Setter Property="TextWrapping" Value="WrapWithOverflow" />
        <Setter Property="Margin" Value="5" />
        <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
    </Style>

    <Style x:Key="BaseTextBlock" TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="Microsoft Sans Serif"/>
        <Setter Property="FontSize" Value="13" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="4,0,0,0" />
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
        <Style.Triggers>
            <Trigger Property="Control.IsEnabled" Value="false">
                <Setter Property="Control.Foreground" Value="Gray" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="BaseTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="FontFamily" Value="Microsoft Sans Serif"/>
        <Setter Property="FontSize" Value="14" />
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="#FFFFFFFF"/>
        <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"  />
        <Setter Property="VerticalContentAlignment" Value="Center"/>             
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                        <ScrollViewer x:Name="PART_ContentHost"  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="#FFCFCDCD" />
                            <Setter Property="BorderBrush" Value="Gray" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BaseTextBoxDataGrid" TargetType="{x:Type TextBox}">
        <Setter Property="FontFamily" Value="Microsoft Sans Serif"/>
        <Setter Property="FontSize" Value="14" />
        <Setter Property="BorderThickness" Value="0.3"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"  />
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                        <ScrollViewer x:Name="PART_ContentHost"  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="true">
                            <Setter Property="Background" Value="#FFFFFFFF" />
                            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="#FFFFFFFF" />
                            <Setter Property="Foreground" Value="Gray" />
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BaseTextArea" TargetType="{x:Type TextBox}" BasedOn="{StaticResource BaseTextBox}">
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="AcceptsReturn" Value="True"/>
        <Setter Property="VerticalContentAlignment" Value="Top"/>
    </Style>

    <Style x:Key="BasePasswordBox" TargetType="{x:Type PasswordBox}">
        <Setter Property="FontFamily" Value="Microsoft Sans Serif"/>
        <Setter Property="FontSize" Value="14" />
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="#FFFFFFFF"/>
        <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"  />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                        <ScrollViewer x:Name="PART_ContentHost"  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BaseToggleButton" BasedOn="{StaticResource {x:Type ToggleButton}}" TargetType="{x:Type RadioButton}">
        <Setter Property="Foreground" Value="White" />
        <Setter Property="FontFamily" Value="Microsoft Sans Serif"/>
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Background" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RadioButton">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="Gray" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Background" Value="{DynamicResource GridHeaderSelectedBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="BaseCheckBoxButton"  TargetType="{x:Type CheckBox}">
        <Setter Property="Foreground" Value="White" />
        <Setter Property="FontFamily" Value="Microsoft Sans Serif"/>
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Background" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <Border CornerRadius="9" BorderThickness="1" Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="Gray" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Background" Value="{Binding DataContext.GridHeaderSelectedColor, RelativeSource={RelativeSource AncestorType=UserControl}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="BaseButton" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="White" />
        <Setter Property="FontFamily" Value="Microsoft Sans Serif"/>
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Background" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="Gray" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BaseRoundedButton" TargetType="{x:Type Button}">    
        <Setter Property="Padding" Value="5" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border CornerRadius="9" BorderThickness="1" Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="Gray" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BaseImageButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}" >                
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="Gray" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Control.IsEnabled" Value="false">
                <Setter Property="Control.Opacity" Value="0.5" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="StatusToggleButton" BasedOn="{StaticResource {x:Type ToggleButton}}" TargetType="{x:Type RadioButton}">
        <Setter Property="Foreground" Value="White" />
        <Setter Property="FontFamily" Value="Microsoft Sans Serif"/>
        <Setter Property="FontSize" Value="14" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Margin" Value="2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RadioButton">
                    <Border x:Name="bg" CornerRadius="180" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Background="{TemplateBinding Background}" BorderBrush="Black">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="BorderThickness" Value="2" TargetName="bg"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter Property="BorderThickness" Value="0" TargetName="bg"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Control.IsEnabled" Value="false">
                <Setter Property="Control.Opacity" Value="0.5" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="StatusImageButton" TargetType="{x:Type Button}" BasedOn="{StaticResource BaseImageButton}">
        <Setter Property="Foreground" Value="White" />
        <Setter Property="FontFamily" Value="Microsoft Sans Serif"/>
        <Setter Property="FontSize" Value="14" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Margin" Value="2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border CornerRadius="180" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Background="{TemplateBinding Background}" BorderBrush="Black" BorderThickness="2">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Control.IsEnabled" Value="false">
                <Setter Property="Control.Opacity" Value="0.5" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="BaseRadio" TargetType="{x:Type RadioButton}">
        <Setter Property="FontFamily" Value="Microsoft Sans Serif"/>
        <Setter Property="FontSize" Value="13" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
        <Style.Triggers>
            <Trigger Property="Control.IsEnabled" Value="false">
                <Setter Property="Control.Foreground" Value="Gray" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="BaseCheckBox" TargetType="{x:Type CheckBox}">
        <Setter Property="FontFamily" Value="Microsoft Sans Serif"/>
        <Setter Property="FontSize" Value="13" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
        <Style.Triggers>
            <Trigger Property="Control.IsEnabled" Value="false">
                <Setter Property="Control.Foreground" Value="Gray" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--<Style x:Key="{x:Type CheckBox}" TargetType="CheckBox">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="FontFamily" Value="{DynamicResource MetroFontRegular}"/>
       
        <Setter Property="Foreground" Value="#999999"/>
        <Setter Property="Background" Value="#3f3f3f"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Border x:Name="Border"  
                              Width="13" 
                              Height="13" 
                              CornerRadius="0" 
                              Background="#3f3f3f"
                              BorderBrush="#999999"
                              BorderThickness="1">
                                <Path 
                                                    Width="7" Height="7" 
                                                    x:Name="CheckMark"
                                                    SnapsToDevicePixels="False" 
                                                    Stroke="#979797"
                                                    StrokeThickness="2"
                                                    Data="M 0 0 L 7 7 M 0 7 L 7 0" />
                            </Border>
                        </BulletDecorator.Bullet>
                        <ContentPresenter Margin="8,0,0,0"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Left"
                            RecognizesAccessKey="True"/>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="CheckMark" Property="Data" Value="M 0 7 L 7 0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="#454545" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ApplicationAccentBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#c1c1c1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->





    <Style TargetType="{x:Type DatePickerTextBox}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <TextBox x:Name="PART_TextBox" BorderThickness="0" VerticalAlignment="Center" Foreground="{DynamicResource ForegroundBrush}" 
                             Text="{Binding Path=SelectedDate, RelativeSource={RelativeSource AncestorType={x:Type DatePicker}}, StringFormat={}{0:dd.MM.yyyy}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BaseDatePicker" TargetType="{x:Type DatePicker}">
        <Setter Property="FontFamily" Value="Microsoft Sans Serif"/>
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="CalendarStyle">
            <Setter.Value>
                <Style TargetType="{x:Type Calendar}">
                    <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
                    <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type Calendar}">
                                <Viewbox Height="400" Width="400">
                                    <CalendarItem x:Name="PART_CalendarItem"
                                          FontFamily="Microsoft Sans Serif"
                                          FontSize ="14"
                                          Background="White"                                                                    
                                          Foreground="{TemplateBinding Foreground}"
                                          BorderBrush="{TemplateBinding BorderBrush}"
                                          BorderThickness="{TemplateBinding BorderThickness}"/>
                                </Viewbox>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Control.IsEnabled" Value="false">
                <Setter Property="Control.BorderBrush" Value="Gray" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="ComboBoxToggleButtonTemplate" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            <Border Name="Border" Grid.ColumnSpan="2" Style="{DynamicResource BorderGrid}" Background="Transparent" Padding="0" />
            <Border Name="TargetBorder" Grid.Column="0" Style="{DynamicResource BorderGrid}" Background="Transparent"  Padding="0"  />
            <Path Name="Arrow" Grid.Column="1" Data="M0,0L4,4 8,0z" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource BorderBrush}"  />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="False">
                <Setter Property="Panel.Background" TargetName="Border" Value="#FFCFCDCD"/>
                <Setter Property="Border.BorderBrush" TargetName="Border" Value="Gray"/>
                <Setter Property="Border.BorderBrush" TargetName="TargetBorder" Value="Gray"/>
                <Setter Property="TextElement.Foreground" Value="Gray"/>
                <Setter Property="Shape.Fill" TargetName="Arrow" Value="Gray"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="ComboBoxTextBoxTemplate" TargetType="{x:Type TextBox}" >
        <Border Name="PART_ContentHost" Background="White" Focusable="False" />
    </ControlTemplate>
    <ControlTemplate x:Key="ComboBoxValidationErrorTemplate">
        <DockPanel>
            <Border BorderBrush="Blue" BorderThickness="4">
                <AdornedElementPlaceholder />
            </Border>
        </DockPanel>
    </ControlTemplate>
    <Style x:Key="BaseComboBox"  TargetType="{x:Type ComboBox}">
        <Setter Property="Margin" Value="0" />
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
        <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="UIElement.SnapsToDevicePixels" Value="True"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="TextElement.Foreground" Value="{DynamicResource ForegroundBrush}"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>

        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <ToggleButton Name="ToggleButton" Grid.Column="2" Template="{StaticResource ComboBoxToggleButtonTemplate}" ClickMode="Press"
                              Focusable="False" IsChecked="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}" />

                        <ContentPresenter Name="ContentSite" IsHitTestVisible="False"
                            Content="{TemplateBinding ComboBox.SelectionBoxItem}" ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}" 
                            Margin="5,3,25,3" HorizontalAlignment="Left" VerticalAlignment="Center"  />

                        <TextBox Name="PART_EditableTextBox"  HorizontalAlignment="Left"   VerticalAlignment="Center" Visibility="Hidden" Background="Transparent"
                            IsReadOnly="False" Focusable="True" xml:space="preserve" Template="{StaticResource ComboBoxTextBoxTemplate}"/>
                        
                        <Popup Name="Popup" Placement="Bottom" Focusable="False" IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}" PopupAnimation="Slide">
                            <Border Name="DropDownBorder" Style="{DynamicResource BorderGrid}" Background="White" Padding="0" >
                                <ScrollViewer SnapsToDevicePixels="True" MinWidth="{TemplateBinding FrameworkElement.ActualWidth}" MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}" >
                                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Border>                            
                        </Popup>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="ItemsControl.HasItems" Value="False">
                            <Setter Property="FrameworkElement.MinHeight" TargetName="DropDownBorder" Value="120"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" Value="Gray" />
                        </Trigger>
                        <Trigger Property="ItemsControl.IsGrouping" Value="True">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                        </Trigger>
                        <Trigger Property="ComboBox.IsEditable" Value="True">
                            <Setter Property="KeyboardNavigation.IsTabStop" Value="False"/>
                            <Setter Property="UIElement.Visibility" TargetName="PART_EditableTextBox" Value="Visible"/>
                            <Setter Property="UIElement.Visibility" TargetName="ContentSite" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--Grid style-->
    <Style TargetType="GridViewColumnHeader">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    </Style>
    <Style TargetType="DataGridColumnHeader">
        <Setter Property="Background" Value="{DynamicResource GridHeaderColor}"/>
    </Style>
    <Style TargetType="DataGrid">
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="{DynamicResource GridHeaderColor}"></Setter>
        <Setter Property="BorderBrush" Value="{DynamicResource BackColor}"/>
        <Setter Property="HorizontalGridLinesBrush" Value="{DynamicResource BackColor}"/>
        <Setter Property="GridLinesVisibility" Value="Horizontal"/>
    </Style>
    <Style x:Key="GridHeaderSelectetdStyle" TargetType="DataGridCell">
        <Setter Property="Background" Value="{DynamicResource GridHeaderColor}"></Setter>
        <Setter Property="BorderBrush" Value="{DynamicResource GridHeaderColor}"></Setter>
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Focusable" Value="False"/>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource GridHeaderSelectedColor}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource GridHeaderSelectedColor}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="GridCaptionSelectedStyle" TargetType="DataGridCell">
        <Setter Property="Foreground" Value="{DynamicResource BackColor}" />
        <Setter Property="Background" Value="{DynamicResource GridTextBackgroundColumn}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource GridTextBackgroundColumn}" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Focusable" Value="False"/>

        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource GridSelectedColor}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource GridSelectedColor}" />
            </Trigger>
            <Trigger Property="IsSelected" Value="False">
                <Setter Property="Background" Value="{DynamicResource GridTextBackgroundColumn}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource GridTextBackgroundColumn}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="GridTextSelectedStyle" TargetType="DataGridCell">
        <Setter Property="Foreground" Value="{DynamicResource BackColor}" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="BorderBrush" Value="{DynamicResource GridTextBackgroundColumn}" />
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource GridSelectedColor}"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="False">
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="GridSelectetdStyle" TargetType="DataGridCell">
        <Setter Property="Foreground" Value="{DynamicResource BackColor}" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Focusable" Value="False"/>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource GridSelectedColor}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource GridSelectedColor}" />
            </Trigger>
            <Trigger Property="IsSelected" Value="False">
                <Setter Property="BorderBrush" Value="Transparent" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="GridOnlySelectetdStyle" TargetType="DataGridCell">
        <Setter Property="Foreground" Value="{DynamicResource BackColor}" />
        <Setter Property="Visibility" Value="Hidden" />
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource GridSelectedColor}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource GridSelectedColor}" />
                <Setter Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsSelected" Value="False">
                <Setter Property="BorderBrush" Value="Transparent" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="GridSortSelectetdStyle" TargetType="DataGridCell">
        <Setter Property="Foreground" Value="{DynamicResource BackColor}" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Focusable" Value="False"/>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderBrush" Value="Transparent" />
            </Trigger>
            <Trigger Property="IsSelected" Value="False">
                <Setter Property="BorderBrush" Value="Transparent" />
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>